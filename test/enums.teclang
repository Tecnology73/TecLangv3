enum Color {
    RED   // 0
    GREEN // 1
    BLUE  // 2
}

func<Color> toString() string {
    // Would need to somehow figure out that the colors refer to the enum.
    // Otherwise we'd have to write Color.RED.
    return when this {
        RED -> "red"
        GREEN -> "green"
        BLUE -> "blue"
    }
}

func printColor(color: Color) {
    println(color.toString())
}

func main() i32 {
    printColor(Color.RED)
    printColor(Color.GREEN)
    printColor(Color.BLUE)

    return 0
}

// --------------------------------------------

enum Color {
    RED   = 1
    GREEN = 2
    BLUE  = 3
}

func printColor(color: Color) {}

func main() i32 {
    // printColor(1.(Color)) // "Red"
    // printColor(4.(Color)) // Error: 4 is not a valid Color value
}

// --------------------------------------------

enum IpAddress {
    v4(i32, i32, i32, i32)
    v6(string)
}

func main() i32 {
    loopback = IpAddress.v4(127, 0, 0, 1)
    loopback[0] // 127
    loopback[1] // 0
    loopback[2] // 0
    loopback[3] // 1
    
    google = Ipaddress.v6("::")
    google[0] // "::"
    
    when loopback {
        IpAddress.v4 -> {
            it[0] // 127
            it[3] // 1
        }
        
        IpAddress.v6 -> {
            it[0] // "::"
            it[1] // Error
        }
    }
}

