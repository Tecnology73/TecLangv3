#include "TypeDefinition.h"
#include "../../ast/Expressions.h"
#include "../../ast/Statements.h"
#include "../../ast/Literals.h"
#include "../../ast/TopLevel.h"
#include "../Compiler.h"
#include "../TypeCoercion.h"
#include "../../context/compiler/FunctionCompilerContext.h"
#include "../../ast/StringInternTable.h"
#include "../topLevel/TypeBase.h"

llvm::Function* generateDefaultConstructor(Visitor* v, TypeDefinition* type) {
    auto funcType = llvm::FunctionType::get(
        Compiler::getBuilder().getVoidTy(),
        {
            type->getLlvmType()->getPointerTo()
        },
        false
    );
    auto func = llvm::Function::Create(
        funcType,
        llvm::Function::PrivateLinkage,
        type->name + "_construct",
        Compiler::getModule()
    );

    auto entry = llvm::BasicBlock::Create(Compiler::getContext(), "entry", func);
    Compiler::getBuilder().SetInsertPoint(entry);

    // Instance is passed in.
    // This allows us to allocate memory for the instance
    // differently (stack vs heap) based on it's lifetime.
    auto ptr = func->getArg(0);
    ptr->setName("this");

    // Set the default values for the fields.
    for (const auto& fieldName: type->fieldOrder) {
        auto item = type->fields[fieldName];
        auto field = Compiler::getBuilder().CreateStructGEP(
            type->llvmType,
            ptr,
            item->index,
            item->name
        );

        llvm::Value* value;
        if (item->expression) {
            item->expression->Accept(v);

            VisitorResult result;
            if (!v->TryGetResult(result)) return nullptr;

            value = result.value;
        } else if (type->name == "string" && fieldName == "data") {
            auto emptyStr = Compiler::getBuilder().CreateGlobalStringPtr("");
            value = Compiler::getBuilder().CreateCall(
                SymbolTable::GetInstance()->LookupFunction("malloc", {})->llvmFunction,
                {
                    Compiler::getBuilder().getInt64(1)
                }
            );

            Compiler::getBuilder().CreateCall(
                SymbolTable::GetInstance()->LookupFunction("strcpy", {})->llvmFunction,
                {
                    value,
                    emptyStr
                }
            );
        } else
            value = TypeCompiler::getDefaultValue(item->type);

        Compiler::getBuilder().CreateStore(
            TypeCoercion::coerce(value, item->type->ResolveType()->getLlvmType()),
            field
        );
    }

    Compiler::getBuilder().CreateRetVoid();

    // Register the constructor statement.
    auto function = new Function(StringInternTable::Intern("construct"));
    function->ownerType = type;
    function->returnType = type->CreateReference();
    function->llvmFunction = func;
    function->AddParameter(type->token, StringInternTable::Intern("this"), type->CreateReference());

    type->AddFunction(function);

    return func;
}

llvm::Function* generateConstructor(Visitor* visitor, Function* function, llvm::Function* defaultConstruct) {
    auto variant = function->ownerType;

    // Compile a list of all the parameters.
    std::vector<llvm::Type *> params = {};
    for (const auto& paramName: function->parameterOrder) {
        auto ty = function->parameters[paramName]->type->ResolveType()->llvmType;
        if (paramName == "this")
            ty = ty->getPointerTo();
        params.push_back(ty);
    }

    // Define the statement
    auto funcType = llvm::FunctionType::get(
        Compiler::getBuilder().getVoidTy(),
        params,
        false
    );
    auto func = function->llvmFunction = llvm::Function::Create(
                    funcType,
                    llvm::Function::PrivateLinkage,
                    variant->name + "_construct",
                    Compiler::getModule()
                );

    auto entry = llvm::BasicBlock::Create(Compiler::getContext(), "entry", func);
    Compiler::getBuilder().SetInsertPoint(entry);

    // Create a scope
    Compiler::getScopeManager().enter("construct", new FunctionCompilerContext(visitor, function));

    // Call the default constructor which properly initializes everything.
    Compiler::getBuilder().CreateCall(defaultConstruct, {func->getArg(0)});

    // Generate the parameters.
    for (const auto& paramName: function->parameterOrder) {
        function->parameters[paramName]->Accept(visitor);
        if (VisitorResult result; !visitor->TryGetResult(result))
            return nullptr;
    }

    // Generate the body.
    for (auto& statement: function->body) {
        statement->Accept(visitor);
        if (VisitorResult result; !visitor->TryGetResult(result))
            return nullptr;
    }

    // Return instance
    Compiler::getBuilder().CreateRetVoid();

    // Cleanup
    Compiler::getScopeManager().popContext();
    Compiler::getScopeManager().leave("construct");
    return func;
}

bool generateFunctions(Visitor* v, TypeDefinition* type) {
    auto lastBlock = Compiler::getBuilder().GetInsertBlock();

    // Generate the default constructor `func<T> construct() {}`
    auto defaultConstruct = generateDefaultConstructor(v, type);
    if (!defaultConstruct) {
        v->AddFailure();
        return false;
    }

    // Generate all the functions for the type
    for (const auto& item: type->functions)
        for (const auto& func: item.second) {
            if (func->llvmFunction) {
                // Already generated.
                continue;
            }

            if (item.first == "construct") {
                if (!generateConstructor(v, func, defaultConstruct)) {
                    v->AddFailure();
                    return false;
                }

                continue;
            }

            // Normal statement.
            func->Accept(v);

            if (VisitorResult result; !v->TryGetResult(result))
                return false;
        }

    // Restore the insert point.
    Compiler::getBuilder().SetInsertPoint(lastBlock);

    return true;
}
